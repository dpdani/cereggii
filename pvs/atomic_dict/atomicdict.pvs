%% SPDX-FileCopyrightText: 2023-present dpdani <git@danieleparmeggiani.me>
%%
%% SPDX-License-Identifier: Apache-2.0


atomicdict[P: { i: nat | i > 0 }]: THEORY
BEGIN
    
    range(i: nat): TYPE = {s: nat | 1 <= s & s <= i}

    p: VAR range(P)
    
    
    % data types
    Address: TYPE+

    null: Address

    non_null_ax: AXIOM
        EXISTS (a: Address): a /= null

    hash: [Address, nat, nat -> nat]

    Entry: TYPE = [#
        key: Address,
        value: Address,
        tombstone: bool,
        reserved: bool,
        swapped: bool
    #]

    EmptyEntry: Entry = (#
        key := null,
        value := null,
        tombstone := false,
        reserved := false,
        swapped := false
    #)

    Block: TYPE = [#
        entries: [nat -> Entry]
    #]

    emptyBlock: Block = (#
        entries := lambda (e: nat): EmptyEntry
    #)

    Node: TYPE = [#
        block: nat,
        pos: nat,
        distance: nat
    #]

    NodeZero: Node = (#
        block := 0,
        pos := 0,
        distance := 0
    #)

    Meta: TYPE = [#
        index: [nat -> Node],
        blocks: [nat -> Block],
        log_size: nat,

        migration_leader: {s: nat | 0 <= s & s <= P},
        new_gen_metadata: Address
    #]

    emptyMeta: Meta = (#
        index := lambda (n: nat): NodeZero,
        blocks := lambda (n: nat): emptyBlock,
        log_size := 6,
        migration_leader := 0,
        new_gen_metadata := null
    #)

    AtomicDict: TYPE = [#
        meta: Address
    #]

    PyObjectType: TYPE = {
        %PyType_AtomicDict,
        PyType_Meta,
        PyType_Block,
        PyType_Other
    }

    PyObject: TYPE+ = [#
        address: Address,
        references: nat,

        type_: PyObjectType,

        meta: Meta,
        block: Block
    #]

    memory_is_infinite: AXIOM
	    EXISTS (x: PyObject): TRUE

    PyNull: PyObject = (#
        address := null,
        references := 0,
        type_ := PyType_Other,
        meta := emptyMeta,
        block := emptyBlock
    #)

    non_PyNull_ax: AXIOM
        EXISTS (o: PyObject): o /= PyNull

    AlivePyObject: TYPE = {
        o: PyObject | o`address /= null and o`references > 0
    }

    DeadPyObject: TYPE = {
        o: PyObject | o`references = 0
    }

    NotFound: PyObject
    NotFound_ax: AXIOM
        address(NotFound) /= null and references(NotFound) > 0
    
    Any: PyObject
    Any_ax: AXIOM
        address(Any) /= null and references(Any) > 0
    
    ExpectationFailed: PyObject
    ExpectationFailed_ax: AXIOM
        address(ExpectationFailed) /= null and references(ExpectationFailed) > 0

    InputPyObject: TYPE = {
        o: AlivePyObject | o /= NotFound and o /= Any and o /= ExpectationFailed
    }


    % global state
    PC: TYPE = {
        pc_main_1,
        pc_main_2,
        pc_main_3,

        pc_getMeta_1,
        pc_getMeta_2,
        pc_getMeta_3,

        pc_tryIncref_1,

        pc_decref_1,

        pc_releaseMeta_1,
        pc_releaseMeta_2,

        pc_find_1,

        pc_insertOrUpdate_1,
        pc_insertOrUpdate_2,
        pc_insertOrUpdate_3,
        pc_insertOrUpdate_4,
        pc_insertOrUpdate_5,
        pc_insertOrUpdate_6,
        pc_insertOrUpdate_7,
        pc_insertOrUpdate_8,
        pc_insertOrUpdate_9,
        pc_insertOrUpdate_10,
        pc_insertOrUpdate_11,
        pc_insertOrUpdate_12,
        pc_insertOrUpdate_13,
        pc_insertOrUpdate_14,
        pc_insertOrUpdate_15,
        pc_insertOrUpdate_16,
        pc_insertOrUpdate_17,
        pc_insertOrUpdate_18,
        pc_insertOrUpdate_19,
        pc_insertOrUpdate_20,
        pc_insertOrUpdate_21,
        pc_insertOrUpdate_22,
        pc_insertOrUpdate_23,
        pc_insertOrUpdate_24,
        pc_insertOrUpdate_25,
        pc_insertOrUpdate_26,
        pc_insertOrUpdate_27,
        pc_insertOrUpdate_28,
        pc_insertOrUpdate_29,

        pc_newEntry_1,

        pc_getEntryAt_1,

        pc_clearEntry_1,

        pc_delete_1,
        pc_delete_2,
        pc_delete_3,
        pc_delete_4,
        pc_delete_5,
        pc_delete_6,
        pc_delete_7,
        pc_delete_8,
        pc_delete_9,
        pc_delete_10,
        pc_delete_11,
        pc_delete_12,
        pc_delete_13,
        pc_delete_14,
        pc_delete_15,
        pc_delete_16,
        pc_delete_17,
        pc_delete_18
    }

    pc_is_main?(pc: PC): bool =
        pc = pc_main_1
        or pc = pc_main_2
        or pc = pc_main_3

    pc_is_insertOrUpdate?(pc: PC): bool =
        pc = pc_insertOrUpdate_1
        or pc = pc_insertOrUpdate_2
        or pc = pc_insertOrUpdate_3
        or pc = pc_insertOrUpdate_4
        or pc = pc_insertOrUpdate_5
        or pc = pc_insertOrUpdate_6
        or pc = pc_insertOrUpdate_7
        or pc = pc_insertOrUpdate_8
        or pc = pc_insertOrUpdate_9
        or pc = pc_insertOrUpdate_10
        or pc = pc_insertOrUpdate_11
        or pc = pc_insertOrUpdate_12
        or pc = pc_insertOrUpdate_13
        or pc = pc_insertOrUpdate_14
        or pc = pc_insertOrUpdate_15
        or pc = pc_insertOrUpdate_16
        or pc = pc_insertOrUpdate_17
        or pc = pc_insertOrUpdate_18
        or pc = pc_insertOrUpdate_19
        or pc = pc_insertOrUpdate_20
        or pc = pc_insertOrUpdate_21
        or pc = pc_insertOrUpdate_22
        or pc = pc_insertOrUpdate_23
        or pc = pc_insertOrUpdate_24
        or pc = pc_insertOrUpdate_25
        or pc = pc_insertOrUpdate_26
        or pc = pc_insertOrUpdate_27
        or pc = pc_insertOrUpdate_28
        or pc = pc_insertOrUpdate_29
    
    pc_is_getMeta?(pc: PC): bool =
        pc = pc_getMeta_1
        or pc = pc_getMeta_2
        or pc = pc_getMeta_3
    
    pc_is_tryIncref?(pc: PC): bool =
        pc = pc_tryIncref_1
    
    pc_is_decref?(pc: PC): bool =
        pc = pc_decref_1
    
    pc_is_releaseMeta?(pc: PC): bool =
        pc = pc_releaseMeta_1
        or pc = pc_releaseMeta_2
    
    pc_is_find?(pc: PC): bool =
        pc = pc_find_1
    
    pc_is_newEntry?(pc: PC): bool =
        pc = pc_newEntry_1
    
    pc_is_getEntryAt?(pc: PC): bool =
        pc = pc_getEntryAt_1
    
    pc_is_clearEntry?(pc: PC): bool =
        pc = pc_clearEntry_1
    
    pc_is_delete?(pc: PC): bool =
        pc = pc_delete_1
        or pc = pc_delete_2
        or pc = pc_delete_3
        or pc = pc_delete_4
        or pc = pc_delete_5
        or pc = pc_delete_6
        or pc = pc_delete_7
        or pc = pc_delete_8
        or pc = pc_delete_9
        or pc = pc_delete_10
        or pc = pc_delete_11
        or pc = pc_delete_12
        or pc = pc_delete_13
        or pc = pc_delete_14
        or pc = pc_delete_15
        or pc = pc_delete_16
        or pc = pc_delete_17
        or pc = pc_delete_18


    State: TYPE+ = [#
        pc: [range(P) -> PC],

        dict: AtomicDict,
        objects: [Address -> PyObject],

        % internal variables
        getMeta_var_ref: [range(P) -> Address],
        getMeta_return_to: [range(P) -> PC],

        releaseMeta_return_to: [range(P) -> PC],

        tryIncref_var_ref: [range(P) -> Address],
        tryIncref_var_success: [range(P) -> bool],
        tryIncref_return_to: [range(P) -> PC],

        find_var_key: [range(P) -> Address],
        find_return_to: [range(P) -> PC],
        
        insertOrUpdate_var_key: [range(P) -> Address],
        insertOrUpdate_var_expected: [range(P) -> Address],
        insertOrUpdate_var_desired: [range(P) -> Address],
        insertOrUpdate_var_done: [range(P) -> bool],
        insertOrUpdate_var_expectation: [range(P) -> bool],
        insertOrUpdate_var_distance: [range(P) -> nat],
        insertOrUpdate_var_pos: [range(P) -> nat],
        insertOrUpdate_var_node: [range(P) -> Node],
        insertOrUpdate_var_return: [range(P) -> Address],
        insertOrUpdate_return_to: [range(P) -> PC],

        newEntry_var_entry: [range(P) -> Entry],
        newEntry_var_entry_ix: [range(P) -> nat],
        newEntry_var_block: [range(P) -> nat],
        newEntry_var_pos: [range(P) -> nat],
        newEntry_return_to: [range(P) -> PC],

        getEntryAt_var_entry: [range(P) -> Entry],
        getEntryAt_var_pos: [range(P) -> nat],
        getEntryAt_var_block: [range(P) -> nat],
        getEntryAt_return_to: [range(P) -> PC],

        clearEntry_return_to: [range(P) -> PC],
        
        delete_var_key: [range(P) -> Address],
        delete_var_expected: [range(P) -> Address],
        delete_var_done: [range(P) -> bool],
        delete_var_expectation: [range(P) -> bool],
        delete_var_distance: [range(P) -> nat],
        delete_var_pos: [range(P) -> nat],
        delete_var_node: [range(P) -> Node],
        delete_var_entry: [range(P) -> Entry],
        delete_var_ok: [range(P) -> bool],
        delete_var_return: [range(P) -> Address],
        delete_return_to: [range(P) -> PC],

        decref_var_ref: [range(P) -> Address],
        decref_return_to: [range(P) -> PC]
    #]

    s: VAR State
    s1, s2: VAR State

    % state sub-types for tccs
    init_decref_var_ref_address: Address
    init_decref_var_ref_address_ax: AXIOM
        EXISTS (a: Address):
            a /= null and init_decref_var_ref_address = a

    init_decref_var_ref: AlivePyObject = (#
        address := init_decref_var_ref_address,
        references := 1,
        type_ := PyType_Other,
        meta := emptyMeta,
        block := emptyBlock
    #)

    state_can_call_decref?(s, p): bool =
        s`decref_return_to(p) /= pc_decref_1 and (
            s`objects(s`decref_var_ref(p)) /= init_decref_var_ref => s`objects(s`decref_var_ref(p))`references >= 1
        )

    DecrefState_ax: AXIOM
        EXISTS (x: {s: State |
            forall (p: range(P)):
                s`objects(s`decref_var_ref(p)) /= init_decref_var_ref => s`objects(s`decref_var_ref(p))`references >= 1
        }): TRUE

    DecrefState: TYPE+ = {s: State |  % a valid state for calling decref
        forall (p: range(P)):
            state_can_call_decref?(s, p)
    }

    s_decref: VAR DecrefState


    % initial state
    initMetaAddress: Address

    initMetaAddress_non_null: AXIOM
        EXISTS (a: Address):
            a /= null and initMetaAddress = a

    initMeta: PyObject = (#
        address := initMetaAddress,
        references := 1,
        type_ := PyType_Meta,
        meta := emptyMeta,
        block := emptyBlock
    #)

    Init: TYPE = {s: State |
        s`dict`meta = initMetaAddress 
        and s`objects(initMetaAddress) = initMeta
        and (
            forall (p: range(P)):
                s`pc(p) = pc_main_1
                and s`tryIncref_var_ref(p) = null
                and s`getMeta_var_ref(p) = null
                and s`decref_var_ref(p) = init_decref_var_ref`address
        )
    }

    init_ax: AXIOM
        EXISTS (s: Init): TRUE


    % - procedures

    % main
    main_1(p, s, s2): bool =
        s`pc(p) = pc_main_1 and (
            s=s2 with [
                (pc)(p) := pc_getMeta_1,
                (getMeta_return_to)(p) := pc_main_2
            ]
        )

    main_2(p, s1, s2): bool =  % non-deterministically call one of find, insertOrUpdate, or delete
        s1`pc(p) = pc_main_2 and (
            (
                exists (k: InputPyObject):
                s1=s2 with [
                    (pc)(p) := pc_find_1,
                    (find_return_to)(p) := pc_main_2,
                    (find_var_key)(p) := k`address
                ]
            )
            or (
                exists (k: InputPyObject, e: {o: AlivePyObject | o /= ExpectationFailed}, v: InputPyObject):
                s1=s2 with [
                    (pc)(p) := pc_insertOrUpdate_1,
                    (insertOrUpdate_return_to)(p) := pc_main_2,
                    (insertOrUpdate_var_key)(p) := k`address,
                    (insertOrUpdate_var_expected)(p) := e`address,
                    (insertOrUpdate_var_desired)(p) := v`address
                ]
            )
            or (
                exists (k: InputPyObject): k /= PyNull and
                s1=s2 with [
                    (pc)(p) := pc_delete_1,
                    (delete_return_to)(p) := pc_main_2,
                    (delete_var_key)(p) := k`address
                ]
            )
        )
    
    main_3(p, s1, s2): bool =
        s1`pc(p) = pc_main_3 and (
            s2=s1 with [
                (pc)(p) := pc_releaseMeta_1,
                (releaseMeta_return_to)(p) := pc_main_1
            ]
        )

    % getMeta (AtomicRef_Get)
    getMeta_1(p, s1, s2): bool =
        s1`pc(p) = pc_getMeta_1 and
        s2=s1 with [
            (pc)(p) := pc_tryIncref_1,
            (tryIncref_return_to)(p) := pc_getMeta_2,
            (getMeta_var_ref)(p) := s1`dict`meta,
            (tryIncref_var_ref)(p) := s1`dict`meta
        ]

    getMeta_2(p, s1, s2): bool =
        s1`pc(p) = pc_getMeta_2 and (
            if s1`tryIncref_var_success(p)
            then s2=s1 with [
                (pc)(p) := pc_getMeta_3
            ]
            else s2=s1 with [
                (pc)(p) := pc_getMeta_1
            ]
            endif
        )
    
    getMeta_3(p, s1, s2): bool =
        s1`pc(p) = pc_getMeta_3 and
        s2=s1 with [
            (pc)(p) := s1`getMeta_return_to(p)
        ]

    % tryIncref (_Py_TRY_INCREF)
    tryIncref_1(p, s1, s2): bool =
        s1`pc(p) = pc_tryIncref_1 and (
            s2=s1 with [
                (pc)(p) := s1`tryIncref_return_to(p)
            ]
        ) and (
            if s1`objects(s1`tryIncref_var_ref(p))`references = 0
            then s2=s1 with [
                (tryIncref_var_success)(p) := false
            ]
            else s2=s1 with [
                (tryIncref_var_success)(p) := true,
                (objects)(s1`tryIncref_var_ref(p)) := s1`objects(s1`tryIncref_var_ref(p)) with [
                    (references) := references(s1`objects(s1`tryIncref_var_ref(p))) + 1
                ]
            ]
            endif
        )

    % decref (Py_DECREF)
    decref_1(p, s_decref, s2): bool =
        s_decref`pc(p) = pc_decref_1 and (
            s2=s_decref with [
                (pc)(p) := s_decref`decref_return_to(p),
                (objects)(s_decref`decref_var_ref(p)) := s_decref`objects(s_decref`decref_var_ref(p)) with [
                    (references) := s_decref`objects(s_decref`decref_var_ref(p))`references - 1
                ],
                (decref_var_ref)(p) := init_decref_var_ref`address
            ]
        )

    % releaseMeta
    releaseMeta_1(p, s1, s2): bool =
        s1`pc(p) = pc_releaseMeta_1 and
        s2=s1 with [
            (pc)(p) := pc_decref_1,
            (releaseMeta_return_to)(p) := pc_releaseMeta_2,
            (decref_var_ref)(p) := s1`getMeta_var_ref(p)
        ]

    releaseMeta_2(p, s1, s2): bool =
        s1`pc(p) = pc_releaseMeta_2 and
        s2=s1 with [
            (pc)(p) := s1`releaseMeta_return_to(p),
            (getMeta_var_ref)(p) := null
        ]

    % find
    find_1(p, s1, s2): bool =
        s1`pc(p) = pc_find_1 and (
            s2=s1 with [
                (pc)(p) := s1`find_return_to(p)
            ]
        )
    
    % insertOrUpdate
    insertOrUpdate_1(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_1 and (
            if s1`objects(s1`insertOrUpdate_var_expected(p)) = NotFound
            then
                s2=s1 with [
                    (pc)(p) := pc_newEntry_1,
                    (newEntry_return_to)(p) := pc_insertOrUpdate_3
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_4
                ]
            endif
        )
    
    insertOrUpdate_3(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_3 and (
            s2=s1 with [
                (pc)(p) := pc_insertOrUpdate_4,
                (newEntry_var_entry)(p) := s1`newEntry_var_entry(p) with [
                    (key) := s1`insertOrUpdate_var_key(p),
                    (value) := s1`insertOrUpdate_var_desired(p)
                ]
            ]
        )
    
    insertOrUpdate_4(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_4 and (
            s2=s1 with [
                (pc)(p) := pc_insertOrUpdate_5,
                (insertOrUpdate_var_done)(p) := false,
                (insertOrUpdate_var_expectation)(p) := true,
                (insertOrUpdate_var_distance)(p) := 0
            ]
        )
    
    insertOrUpdate_5(p, s1, s2): bool =  % while(!done)
        s1`pc(p) = pc_insertOrUpdate_5 and (
            if not s1`insertOrUpdate_var_done(p)
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_6
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_25
                ]
            endif
        )

    insertOrUpdate_6(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_6 and (
            s2=s1 with [
                (pc)(p) := pc_insertOrUpdate_7,
                (insertOrUpdate_var_pos)(p) := hash(
                    s1`insertOrUpdate_var_key(p),
                    s1`objects(s1`getMeta_var_ref(p))`meta`log_size,
                    s1`insertOrUpdate_var_distance(p)
                )
            ]
        )

    insertOrUpdate_7(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_7 and (
            s2=s1 with [
                (pc)(p) := pc_insertOrUpdate_8,
                (insertOrUpdate_var_node)(p) := s1`objects(s1`getMeta_var_ref(p))`meta`index(s1`insertOrUpdate_var_pos(p))
            ]
        )

    insertOrUpdate_8(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_8 and (
            if s1`insertOrUpdate_var_node(p) = NodeZero
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_9
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_14
                ]
            endif
        )
    
    insertOrUpdate_9(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_9 and (
            if s1`objects(s1`insertOrUpdate_var_expected(p)) /= NotFound
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_10
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_11
                ]
            endif
        )
    
    insertOrUpdate_10(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_10 and (
            s2=s1 with [
                (pc)(p) := pc_insertOrUpdate_24,
                (insertOrUpdate_var_done)(p) := true,
                (insertOrUpdate_var_expectation)(p) := false
            ]
        )

    insertOrUpdate_11(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_11 and (
            if s1`objects(s1`getMeta_var_ref(p))`meta`index(s1`insertOrUpdate_var_pos(p)) = NodeZero
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_12,
                    (objects)(s1`getMeta_var_ref(p))(meta) := s1`objects(s1`getMeta_var_ref(p))`meta with [
                        (index)(s1`insertOrUpdate_var_pos(p)) := (#
                            block := s1`newEntry_var_block(p),
                            pos := s1`newEntry_var_pos(p),
                            distance := s1`insertOrUpdate_var_distance(p)
                        #)
                    ],
                    (insertOrUpdate_var_done)(p) := true
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_12
                ]
            endif
        )

    insertOrUpdate_12(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_12 and (
            if not s1`insertOrUpdate_var_done(p)
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_5
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_24
                ]
            endif
        )
    
    insertOrUpdate_14(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_14 and (
            s1=s2 with [
                (pc)(p) := pc_getEntryAt_1,
                (getEntryAt_return_to)(p) := pc_insertOrUpdate_15
            ]
        )
    
    insertOrUpdate_15(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_15 and (
            if s1`getEntryAt_var_entry(p)`key = s1`insertOrUpdate_var_key(p)
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_16
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_24
                ]
            endif
        )
    
    insertOrUpdate_16(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_16 and (
            if s1`objects(s1`insertOrUpdate_var_expected(p)) = NotFound
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_17
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_19
                ]
            endif
        )
    
    insertOrUpdate_17(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_17 and (
            if s1`getEntryAt_var_entry(p)`tombstone or s1`getEntryAt_var_entry(p)`value = null
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_18
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_24
                ]
            endif
        )

    insertOrUpdate_18(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_18 and (
            s2=s1 with [
                (pc)(p) := pc_insertOrUpdate_24,
                (insertOrUpdate_var_done)(p) := true,
                (insertOrUpdate_var_expectation)(p) := false
            ]
        )

    insertOrUpdate_19(p, s1, s2): bool =
        % inv: s1`objects(s1`insertOrUpdate_var_expected(p)) /= NotFound
        s1`pc(p) = pc_insertOrUpdate_19 and (
            if s1`getEntryAt_var_entry(p)`value /= s1`insertOrUpdate_var_expected(p) 
                and s1`objects(s1`insertOrUpdate_var_expected(p)) /= Any
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_20
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_21
                ]
            endif
        )

    insertOrUpdate_20(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_20 and (
            s2=s1 with [
                (pc)(p) := pc_insertOrUpdate_24,
                (insertOrUpdate_var_done)(p) := true,
                (insertOrUpdate_var_expectation)(p) := false
            ]
        )

    insertOrUpdate_21(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_21 and (
            if s1`objects(s1`getMeta_var_ref(p))`meta`blocks(s1`getEntryAt_var_block(p))`entries(s1`getEntryAt_var_pos(p))`
                value = s1`getEntryAt_var_entry(p)`value
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_22,
                    (insertOrUpdate_var_done)(p) := true,
                    (objects) := s1`objects with [
                        (s1`getMeta_var_ref(p)) := s1`objects(s1`getMeta_var_ref(p)) with [
                            (meta) := s1`objects(s1`getMeta_var_ref(p))`meta with [
                                (blocks)(s1`getEntryAt_var_block(p)) := s1`objects(s1`getMeta_var_ref(p))`meta`blocks(s1`getEntryAt_var_block(p)) with [
                                    (entries)(s1`getEntryAt_var_pos(p)) := s1`objects(s1`getMeta_var_ref(p))`meta`blocks(s1`getEntryAt_var_block(p))`entries(s1`getEntryAt_var_pos(p)) with [
                                        (value) := s1`insertOrUpdate_var_desired(p)
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_22,
                    (insertOrUpdate_var_done)(p) := false
                ]
            endif
        )

    insertOrUpdate_22(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_22 and (
            if not s1`insertOrUpdate_var_done(p)
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_24
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_23
                ]
            endif
        )

    insertOrUpdate_23(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_23 and (
            s2=s1 with [
                (pc)(p) := pc_insertOrUpdate_5
            ]
        )

    insertOrUpdate_24(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_24 and (
            s2=s1 with [
                (pc)(p) := pc_insertOrUpdate_5,
                (insertOrUpdate_var_distance)(p) := s1`insertOrUpdate_var_distance(p) + 1
            ]
        )

    insertOrUpdate_25(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_25 and (
            if s1`objects(s1`insertOrUpdate_var_expected(p)) = NotFound and s1`insertOrUpdate_var_expectation(p) = false
            then
                s2=s1 with [
                    (pc)(p) := pc_clearEntry_1,
                    (clearEntry_return_to)(p) := pc_insertOrUpdate_27
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_27
                ]
            endif
        )

    insertOrUpdate_27(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_27 and (
            if s1`insertOrUpdate_var_expectation(p) = true
            then
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_28
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_insertOrUpdate_29
                ]
            endif
        )
    
    insertOrUpdate_28(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_28 and (
            s2=s1 with [
                (pc)(p) := s1`insertOrUpdate_return_to(p),
                (insertOrUpdate_var_return)(p) := s1`insertOrUpdate_var_expected(p)
            ]
        )
    
    insertOrUpdate_29(p, s1, s2): bool =
        s1`pc(p) = pc_insertOrUpdate_29 and (
            s2=s1 with [
                (pc)(p) := s1`insertOrUpdate_return_to(p),
                (insertOrUpdate_var_return)(p) := s1`insertOrUpdate_var_desired(p)
            ]
        )

    % delete
    delete_1(p, s1, s2): bool =
        s1`pc(p) = pc_delete_1 and (
            s2=s1 with [
                (pc)(p) := pc_delete_2,
                (delete_var_done)(p) := false,
                (delete_var_expectation)(p) := true,
                (delete_var_distance)(p) := 0
            ]
        )
    
    delete_2(p, s1, s2): bool =  % while(!done)
        s1`pc(p) = pc_delete_2 and (
            if not s1`delete_var_done(p)
            then
                s2=s1 with [
                    (pc)(p) := pc_delete_3
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_delete_14
                ]
            endif
        )
    
    delete_3(p, s1, s2): bool =
        s1`pc(p) = pc_delete_3 and (
            s2=s1 with [
                (pc)(p) := pc_delete_4,
                (delete_var_pos)(p) := hash(
                    s1`delete_var_key(p),
                    s1`objects(s1`getMeta_var_ref(p))`meta`log_size,
                    s1`delete_var_distance(p)
                )
            ]
        )
    
    delete_4(p, s1, s2): bool =
        s1`pc(p) = pc_delete_4 and (
            s2=s1 with [
                (pc)(p) := pc_delete_5,
                (delete_var_node)(p) := s1`objects(s1`getMeta_var_ref(p))`meta`index(s1`delete_var_pos(p))
            ]
        )
    
    delete_5(p, s1, s2): bool =
        s1`pc(p) = pc_delete_5 and (
            if s1`delete_var_node(p) = NodeZero
            then
                s2=s1 with [
                    (pc)(p) := s1`delete_return_to(p),
                    (delete_var_return)(p) := NotFound`address
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_delete_7
                ]
            endif
        )
    
    delete_7(p, s1, s2): bool =
        s1`pc(p) = pc_delete_7 and (
            s2=s1 with [
                (pc)(p) := pc_getEntryAt_1,
                (getEntryAt_return_to)(p) := pc_delete_8,
                (getEntryAt_var_pos)(p) := s1`delete_var_node(p)`pos
            ]
        )
    
    delete_8(p, s1, s2): bool =
        s1`pc(p) = pc_delete_8 and (
            if s1`getEntryAt_var_entry(p)`key = s1`delete_var_key(p)
            then
                s2=s1 with [
                    (pc)(p) := pc_delete_9
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_delete_13
                ]
            endif
        )
    
    delete_9(p, s1, s2): bool =
        s1`pc(p) = pc_delete_9 and (
            if (
                s1`getEntryAt_var_entry(p)`value = s1`delete_var_expected(p)
                and s1`objects(s1`delete_var_expected(p)) /= Any
            )
            then
                s2=s1 with [
                    (pc)(p) := pc_delete_10
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_delete_11
                ]
            endif
        )
    
    delete_10(p, s1, s2): bool =
        s1`pc(p) = pc_delete_10 and (
            s2=s1 with [
                (pc)(p) := pc_delete_13,
                (delete_var_done)(p) := true,
                (delete_var_expectation)(p) := false
            ]
        )
    
    delete_11(p, s1, s2): bool =
        s1`pc(p) = pc_delete_11 and (
            s1=s2 with [
                (pc)(p) := pc_delete_12
            ]
        ) and (
            if s1`getEntryAt_var_entry(p)`value = s1`objects(s1`getMeta_var_ref(p))`meta`blocks(s1`getEntryAt_var_block(p))`
                entries(s1`getEntryAt_var_pos(p))`value
            then
                s2=s1 with [
                    (objects)(s1`getMeta_var_ref(p))(meta) := s1`objects(s1`getMeta_var_ref(p))`meta with [
                        (blocks)(s1`getEntryAt_var_block(p)) := s1`objects(s1`getMeta_var_ref(p))`meta`blocks(s1`getEntryAt_var_block(p)) with [
                            (entries)(s1`getEntryAt_var_pos(p)) := s1`objects(s1`getMeta_var_ref(p))`meta`blocks(s1`getEntryAt_var_block(p))`entries(s1`getEntryAt_var_pos(p)) with [
                                (value) := null
                            ]
                        ]
                    ],
                    (delete_var_done)(p) := true
                ]
            else
                s2=s1 with [
                    (delete_var_done)(p) := false
                ]
            endif
        )
    
    delete_12(p, s1, s2): bool =
        s1`pc(p) = pc_delete_12 and (
            if not s1`delete_var_done(p)
            then
                s2=s1 with [
                    (pc)(p) := pc_delete_2
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_delete_13
                ]
            endif
        )
    
    delete_13(p, s1, s2): bool =
        s1`pc(p) = pc_delete_13 and (
            s2=s1 with [
                (pc)(p) := pc_delete_2,
                (delete_var_distance)(p) := s1`delete_var_distance(p) + 1
            ]
        )
    
    delete_14(p, s1, s2): bool =
        s1`pc(p) = pc_delete_14 and (
            if not s1`delete_var_expectation(p)
            then
                s2=s1 with [
                    (pc)(p) := pc_delete_15
                ]
            else
                s2=s1 with [
                    (pc)(p) := pc_delete_16
                ]
            endif
        )

    delete_15(p, s1, s2): bool =
        s1`pc(p) = pc_delete_15 and (
            s2=s1 with [
                (pc)(p) := s1`delete_return_to(p),
                (delete_var_return)(p) := ExpectationFailed`address
            ]
        )
    
    

    % - invariants

    % dict`meta is a valid meta
    inv_dict_meta(s): bool =
        s`objects(s`dict`meta)`type_ = PyType_Meta
        and s`objects(s`dict`meta)`references > 0

    % decref_var_ref is an AlivePyObject
    inv_decref_ref(p, s): bool =
        s`pc(p) = pc_decref_1 => s`objects(s`decref_var_ref(p))`references > 0
    
    inv_decref_call(p, s): bool =
        s`decref_var_ref(p) /= init_decref_var_ref`address => s`pc(p) = pc_decref_1
    
    inv_decref_calls(p, s): bool =
        (pc_is_decref?(s`pc(p)) => s`decref_return_to(p) /= pc_decref_1)
        and (pc_is_insertOrUpdate?(s`pc(p)) => s`insertOrUpdate_return_to(p) /= pc_decref_1)
        and (pc_is_find?(s`pc(p)) => s`find_return_to(p) /= pc_decref_1)
        and (pc_is_getMeta?(s`pc(p)) => s`getMeta_return_to(p) /= pc_decref_1)
        and (pc_is_releaseMeta?(s`pc(p)) => s`releaseMeta_return_to(p) /= pc_decref_1)
        and (pc_is_tryIncref?(s`pc(p)) => s`tryIncref_return_to(p) /= pc_decref_1)
        and (pc_is_newEntry?(s`pc(p)) => s`newEntry_return_to(p) /= pc_decref_1)
        and (pc_is_getEntryAt?(s`pc(p)) => s`getEntryAt_return_to(p) /= pc_decref_1)
        and (pc_is_clearEntry?(s`pc(p)) => s`clearEntry_return_to(p) /= pc_decref_1)
        and (pc_is_delete?(s`pc(p)) => s`delete_return_to(p) /= pc_decref_1)
    
    inv_getMeta_return_to(p, s): bool =
        pc_is_getMeta?(s`pc(p)) => s`getMeta_return_to(p) = pc_main_2


    INV(p, s): bool =
        inv_dict_meta(s)
        and inv_decref_call(p, s)
        and inv_decref_ref(p, s)
        and inv_getMeta_return_to(p, s)

    % @QED INV_init proved by dp on Fri, 08 Mar 2024 18:26:03 GMT
    INV_init: THEOREM
        FORALL (p: range(P), s: Init): INV(p, s)

    % - transitions
    step(p, s1, s2): bool =
        main_1(p, s1, s2)
        or main_2(p, s1, s2)
        or main_3(p, s1, s2)

        or getMeta_1(p, s1, s2)
        or getMeta_2(p, s1, s2)
        or getMeta_3(p, s1, s2)

        or tryIncref_1(p, s1, s2)

        or (
            state_can_call_decref?(s1, p) and decref_1(p, s1, s2)
        )

        or releaseMeta_1(p, s1, s2)
        or releaseMeta_2(p, s1, s2)

        or find_1(p, s1, s2)

        or insertOrUpdate_1(p, s1, s2)
        % or insertOrUpdate_2(p, s1, s2)
        or insertOrUpdate_3(p, s1, s2)
        or insertOrUpdate_4(p, s1, s2)
        or insertOrUpdate_5(p, s1, s2)
        or insertOrUpdate_6(p, s1, s2)
        or insertOrUpdate_7(p, s1, s2)
        or insertOrUpdate_8(p, s1, s2)
        or insertOrUpdate_9(p, s1, s2)
        or insertOrUpdate_10(p, s1, s2)
        or insertOrUpdate_11(p, s1, s2)
        or insertOrUpdate_12(p, s1, s2)
        % or insertOrUpdate_13(p, s1, s2)
        or insertOrUpdate_14(p, s1, s2)
        or insertOrUpdate_15(p, s1, s2)
        or insertOrUpdate_16(p, s1, s2)
        or insertOrUpdate_17(p, s1, s2)
        or insertOrUpdate_18(p, s1, s2)
        or insertOrUpdate_19(p, s1, s2)
        or insertOrUpdate_20(p, s1, s2)
        or insertOrUpdate_21(p, s1, s2)
        or insertOrUpdate_22(p, s1, s2)
        or insertOrUpdate_23(p, s1, s2)
        or insertOrUpdate_24(p, s1, s2)
        or insertOrUpdate_25(p, s1, s2)
        % or insertOrUpdate_26(p, s1, s2)
        or insertOrUpdate_27(p, s1, s2)
        or insertOrUpdate_28(p, s1, s2)
        or insertOrUpdate_29(p, s1, s2)

        % or newEntry_1(p, s1, s2)

        % or getEntryAt_1(p, s1, s2)

        % or clearEntry_1(p, s1, s2)

        or delete_1(p, s1, s2)
        ;

    decref_returns_lemma: LEMMA
        FORALL (p, s1, s2):
            (
                step(p, s1, s2)
                and s1`pc(p) = pc_decref_1
            )
            => s2`pc(p) /= pc_decref_1
        
    % @QED decref_not_recursive proved by dp on Wed, 20 Mar 2024 14:28:27 GMT
    decref_not_recursive: LEMMA
        FORALL (p, s1, s2):
            (
                step(p, s1, s2)
                and s1`pc(p) = pc_decref_1
            )
            => s1`decref_return_to(p) /= pc_decref_1
    
    decref_doesnt_call_other: LEMMA
        FORALL (p, s1, s2):
            (
                INV(p, s1)
                and step(p, s1, s2)
                and INV(p, s2)
                and s1`pc(p) = pc_decref_1
            )
            => (
                s1`getMeta_return_to(p) /= pc_decref_1 and
                s1`releaseMeta_return_to(p) /= pc_decref_1 and
                s1`tryIncref_return_to(p) /= pc_decref_1 and
                s1`find_return_to(p) /= pc_decref_1 and
                s1`insertOrUpdate_return_to(p) /= pc_decref_1 and
                s1`newEntry_return_to(p) /= pc_decref_1 and
                s1`getEntryAt_return_to(p) /= pc_decref_1 and
                s1`clearEntry_return_to(p) /= pc_decref_1 and
                s1`delete_return_to(p) /= pc_decref_1 and
                s1`decref_return_to(p) /= pc_decref_1
            )

    % @QED decref_lemma proved by dp on Wed, 20 Mar 2024 13:50:25 GMT
    decref_lemma: LEMMA
        FORALL (p, s1, s2):
            (
                INV(p, s1) 
                and step(p, s1, s2)
                and s1`pc(p) /= pc_decref_1
                and s1`decref_var_ref(p) /= init_decref_var_ref`address
            )
            => s2`pc(p) = pc_decref_1

    INV_transition: LEMMA
        FORALL (p: range(P), s1: State, s2: State):
            INV(p, s1) and step(p, s1, s2) => INV(p, s2)


END atomicdict
