[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "cereggii"
#dynamic = ["version"]
version = "0.0.1"
description = "Concurrent threading utilities for Python"
readme = "README.md"
requires-python = "==3.9.10"
license = { file = "LICENSE" }
authors = [
  { name = "dpdani", email = "git@danieleparmeggiani.me" },
]
keywords = [
  "multithreading",
]
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: Implementation :: CPython",
  "Operating System :: OS Independent",
  "Natural Language :: English",
]
dependencies = []


[project.urls]
Documentation = "https://github.com/dpdani/cereggii#readme"
Issues = "https://github.com/dpdani/cereggii/issues"
Source = "https://github.com/dpdani/cereggii"


#[tool.hatch.version]
#path = "./src/cereggii/__about__.py"
# fixme: relative path works with hatch, but not with python -m build. why?
#     ...
#       File "/tmp/build-env-b4uoz1_c/lib/python3.9/site-packages/hatchling/build.py", line 56, in build_wheel
#    return os.path.basename(next(builder.build(wheel_directory, ['standard'])))
#  File "/tmp/build-env-b4uoz1_c/lib/python3.9/site-packages/hatchling/builders/plugin/interface.py", line 93, in build
#    self.metadata.validate_fields()
#  File "/tmp/build-env-b4uoz1_c/lib/python3.9/site-packages/hatchling/metadata/core.py", line 243, in validate_fields
#    _ = self.version
#  File "/tmp/build-env-b4uoz1_c/lib/python3.9/site-packages/hatchling/metadata/core.py", line 128, in version
#    self._version = self._get_version()
#  File "/tmp/build-env-b4uoz1_c/lib/python3.9/site-packages/hatchling/metadata/core.py", line 226, in _get_version
#    version = self.hatch.version.cached
#  File "/tmp/build-env-b4uoz1_c/lib/python3.9/site-packages/hatchling/metadata/core.py", line 1415, in cached
#    raise type(e)(message) from None
#  OSError: Error getting the version from source `regex`: file does not exist: ./src/cereggii/__about__.py

[tool.hatch.build.targets.sdist]
packages = ["src/cereggii"]
exclude = [
  "/.github",
]

[tool.hatch.build.targets.wheel]
packages = ["src/cereggii"]


[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.290",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["==3.9"]


[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.290",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/cereggii tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]


[tool.black]
target-version = ["py39"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py39"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["cereggii"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


[tool.coverage.run]
source_pkgs = ["src/cereggii", "tests"]
branch = true
parallel = true
omit = [
  "src/cereggii/__about__.py",
]

[tool.coverage.paths]
cereggii = ["src/cereggi"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
